# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright © 2021 Matteo Foglieni and Riccardo Gervasoni
#
# TUTORIAL BASIC SYNTAX
# This is a simple tutorial scene-file that explains the basic syntax
# of how scene can be defined for this program
#
#
#
#    PAY ATTENTION: THIS FILE IS USED FOR THE INTERPRETER TESTS,
#    in order to check that eventual changes to any of the lexer/parser
#    functions do not affect the ability of parse a scene-file.
#    DO NOT MODIFY THIS FILE IF YOU ARE NOT SURE OF WHAT YOU ARE DOING!
#
#
# 
# In order to check the correct behaviour of this file (i.e. that is correctòy parsed,
# without throwing exceptions) run the followinf command in the CLI (or another equivalent):
#
#    ./Raytracer.jl render examples/tutorial_basic_sintax.txt onoff 
#
#
# And now let's start explaining how the scene-file must be written!


# Everything that follows an hashtag symbol ("#") it's a comment
# and will be ignored by lexer and parser.

#=

It's also possible to comment large parts of scene-code thanks to a combination of
"#" and "=" symbols; this will comment everything between the "coniugate " symbol made
of "=" and "#".

=#

# Let's now define a variable!
FLOAT my_float(1.0)
# now "my_float" it's an identifier associated with the floating number "1.0"!

# You can define with a similar syntax also:
BOOL my_bool(TRUE)                      # Bools           
VECTOR my_vec([1, 2, 3])                # Vectors, BUT SQUARE BRACKETS [] AND COMMAS , ARE REQUIRED!
COLOR my_col(<1, 2, 3>)                 # Vectors, BUT ANGLE BRACKETS <> AND COMMAS , ARE REQUIRED!
STRING my_str("let's create a string")  # Strings, BUT DOUBLE QUOTES "" ARE REQUIRED!



# You can also define with a slightly more complicated syntax also:
# - Pigments, that can be of three types:
PIGMENT my_uniform( UNIFORM(<1,1,1>) )                      # Uniform Pigment, created from an input color
PIGMENT my_checkered( CHECKERED( <1,1,1> , <2,2,2>, 4 ) )   # Checkered Pigment, created from two input color and an integer fo the number of steps
PIGMENT my_image( IMAGE("images/milky_way.jpg"))          # Image Pigment, created from an image loaded from the specified input path

# - BRDF, created from an input pigment, that can be of two types:
BRDF my_diffuse( DIFFUSE(IMAGE("images/milky_way.jpg")) )   # Diffuse BRDF, as a opaque object
BRDF my_specular( SPECULAR(UNIFORM(<1,1,1>)) )              # Specular BRDF, as a mirror object          

# - Material, created from a BRDF (first argument) that describes the object surface,
# and a Pigment (second argument) that describes the self-emitted radiance of the object
MATERIAL my_material ( DIFFUSE(UNIFORM(<1,1,1>)) , UNIFORM(<0,0,0>) )

# - Transformations, created from a concatenations of basic transformations (you will see
# them in the next tutorial file "demo_world_B.txt") through the symbol "*"
TRANSFORMATION my_trans(
     TRANSLATION([1,0,1])
     * SCALING([0.5, 0.5, 1.0])
)


# You can also define objects from pre-defined variables!
MATERIAL my_second_material(my_diffuse, my_uniform)
TRANSFORMATION my_second_trans( TRANSLATION(my_vec) )


# Math operations are enabled between floats...
FLOAT float(pi + 3.5*e)     # pi and e are reserved words!
FLOAT another_float( float + 1.0 - float/(pi + 3.5*e))                   
# ...between float and color and between colors...
COLOR color(<1,1,1> * float)
COLOR another_color( color + <1, 1, 1.0> - color*1.0/(pi + 3.5*e) )     # use *1.0/... to divide a color for a number
# ...and between float and vector and between vectors.
VECTOR vector([1,1,1] * float)
VECTOR another_vector( vector + [1.0, 1, 1] - vector*1.0/(pi + 3.5*e) ) 

# You can use all the functions define inside the Raytracing package
# or inside the Base Julia Module!
FLOAT value_cos(cos(pi) + sin(pi/4))
PRINT(value_cos)

# You can also define your own functions inside the "src/YOUR_FUNCTIONS.jl" file
# and use them here!
FLOAT value_my_function (my_function(1.0))   # "my_function" is defined in that file
PRINT(value_my_function)

# It's also possible to check if a variable has a specific value
# or is greater that/less than another with the ASSERT keyword
ASSERT(1, 1)             # Checking that 1==1, throws AssertionError otherwise
ASSERT(1, 1, "=")        # Checking that 1==1 again
ASSERT(1, 1, "==")       # Checking that 1==1 again
ASSERT(1, 1, "approx")   # Checking that 1 approx 1 
ASSERT(1, 2, "<")        # Checking that 1<2
ASSERT(1, 2, "<=")       # Checking that 1<=2
ASSERT(3, 2, ">")        # Checking that 3>2
ASSERT(3, 2, ">=")       # Checking that 3>=2
ASSERT(value_my_function, 2)

# in a more complicated manner:
ASSERT(another_float, pi + 3.5*e)
ASSERT(another_color, (pi + 3.5*e)*<1,1,1>)
ASSERT(another_vector, (pi + 3.5*e)*[1,1,1])
ASSERT(value_cos, -1 + sqrt(2)/2 , "approx")


# Last but not least, you can print to stdout the value of a variable or identifier
PRINT(1.0)
PRINT(another_float)
PRINT(another_color)
PRINT(another_vector)


FLOAT var_anim(1.0)
FLOAT another_var_anim(2.0)
PRINT(var_anim)
PRINT(another_var_anim)

# Now move to read the "examples/demo_world_B.txt" file to understand
# how create a scene!
