# ./Raytracer.jl render torus_debug.txt --width=1200 --height=900

# CAMERA(ORTHOGONAL, TRANSLATION([-2.0, 0.0, 0.0]))
CAMERA(PERSPECTIVE, TRANSLATION([-2.0, 0.0, 0.0]), 2.0)

COLOR purple(<128, 0, 128>)
# COLOR lime(<0, 255, 0>)
# COLOR balck(BLACK)

VECTOR donut_pos([8.4, 1.5, 0.0])
FLOAT small_r(0.5)
FLOAT big_r(1.5)
PIGMENT donut_pigment(CHECKERED(purple, NAVY, 40))
# BRDF donut_brdf( DIFFUSE(CHECKERED(purple, NAVY, 40)))
# BRDF donut_brdf( DIFFUSE(CHECKERED(purple, NAVY, 40)), 5.0)
# BRDF donut_brdf( DIFFUSE(donut_pigment))
# BRDF donut_brdf(DIFFUSE(UNIFORM(RED)), 1.0)
# BRDF donut_brdf(DIFFUSE(donut_pigment), 30.0)
BRDF donut_brdf(DIFFUSE(donut_pigment))

MATERIAL donut_material(
    DIFFUSE(donut_pigment),
    donut_pigment
)

TRANSFORMATION donut_trans(
    TRANSLATION(donut_pos) * ROTATION_Z(pi/3) * SCALING([1.5, 3.0, 0.9])
)

BOOL flag1(TRUE)
BOOL flag2(TRUE)

TORUS(
    donut_material,
    donut_trans,
    1.0,
    8.0
)

POINTLIGHT(
    [8.4, 1.5, -30.0],
    <25.5, 25.5, 25.5>
)






#function expect_bool(inputstream::InputStream, scene::Scene)
#     token = read_token(inputstream)
#     if typeof(token.value) == KeywordToken
#          unread_token(inputstream, token)
#          keyword = expect_keywords(inputstream, [ TRUE,  FALSE])
#
#          if keyword == TRUE
#               return true
#          elseif keyword == FALSE
#               return false
#          else
#               throw(ArgumentError("how did you come here?"))
#          end
#
#     elseif typeof(token.value) == IdentifierToken
#          variable_name = token.value.identifier
#  
#          (variable_name âˆˆ keys(scene.bool_variables) ) ||
#               throw(GrammarError(token.location, "unknown bool variable '$(token)'"))
#          return scene.bool_variables[variable_name]
#     else
#          throw(GrammarError(token.location, "got '$(token)' instead of a bool variable"))
#     end
#end